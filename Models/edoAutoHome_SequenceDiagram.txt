@startuml
participant main as "__main__"
participant log as "logObject:edoClassFileLogger"
participant config as "configObject:edoClassConfig"
database db as "objDB:edoClassDB"
participant sensors as "sensors:getEnabledSensors"
participant devList as "AlarmDevList:getEnabledAlarms"
participant alarm as "objAlarm:alarmClass"
participant sensors as "getEnabledSensors"
participant queue as "triggerQueue:Queue"
participant startLoop as "startLoop()"
participant triggerListener as "triggerListener:triggerQueueHandler"
participant TCPserver as ":edoThreadedTCPServer"
participant motion as "sensor_motionpir:edoPirMotion"
participant sensor as "sensor_doorswitch:edoSwitch"
participant power as "sensor_power:edoPowerMeter"
participant buzzer as "alarm_buzzer:edoBuzzer"
participant gmail as "alarm_gmail:edoGmailAlarm"
participant ftp as "objFtp:edoFtp"

== Initialisation ==
main -> log : init()
activate log
log -> main : return LogObject
|||
main -> config : init()
activate config
config -> main : return ConfigObject
|||
main -> db : initi()
activate db
db -> main : return DbObject
|||
main -> sensors : getEnabledSensors(configObject)
activate devList
note right of devList
	This object represents all
	the sensors to be monitored
endnote
devList -> main : return sensorList
|||
main -> queue : init()
note left of queue
	This is the queue where all events passed through
endnote
activate queue
queue -> main : return queue
 == startLoop ==
main -> startLoop : startLoop(mode, deviceId, sensors, db, alarm, LogObject)
startLoop --> triggerListener : init(listenPort, triggerQueue)
loop
	triggerListener --> TCPserver : init(port, queue)
	TCPserver --> triggerListener : return message
end

@enduml
