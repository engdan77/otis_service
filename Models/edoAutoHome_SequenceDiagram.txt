@startuml
participant main as "__main__"
participant log as "logObject:edoClassFileLogger"
participant config as "configObject:edoClassConfig"
database db as "objDB:edoClassDB"
participant sensors as "sensors:getEnabledSensors"
participant devList as "AlarmDevList:getEnabledAlarms"
participant alarm as "alarm:alarmClass"
participant sensors as "getEnabledSensors"
participant queue as "triggerQueue:Queue" #red
participant startLoop as "startLoop()"
participant triggerListener as "triggerListener:triggerQueueHandler"
participant queueHandler as "objTriggerQueueHandler:triggerQueueHandler"
participant sensorCheck as "objSensorCheck:sensorCheck"
participant motion as "sensor_motionpir:edoPirMotion"
participant sensor as "sensor_doorswitch:edoSwitch"
participant power as "sensor_power:edoPowerMeter"
participant gmail as "alarm_gmail:edoGmailAlarm"
actor thief #red

== Initialisation ==
main -> log : init():LogObject
activate log
log -> main : log
deactivate log
|||
main -> config : init():ConfigObject
activate config
config -> main : config
deactivate config
|||
main -> db : init():edoClassDB
activate db
db -> main : db
deactivate db
|||
main -> sensors : getEnabledSensors(configObject):List
activate sensors
note right of devList
	This object represents all
	the sensors to be monitored
endnote
sensors -> main : sensors
deactivate sensors
|||
main -> alarm : init(config,db,devList,led,cameras):List
activate alarm
note right of devList
	This is a list of all larms
	that could be triggered
endnote
alarm -> main : alarm
deactivate alarm
|||
main -> queue : init():Queue::queue
note left of queue
	This is the queue where all events passed through
endnote
activate queue
queue -> main : queue
deactivate queue
 == startLoop ==
main -> startLoop : startLoop(mode, deviceId, sensors, db, alarm, log)
startLoop ->> triggerListener : init(listenPort, triggerQueue):Thread::thread
loop
	activate triggerListener
	activate queue
note left of triggerListener
Starts server 
and listens for
incoming events
end note
	triggerListener -> triggerListener : handle()
	activate triggerListener
	triggerListener -->> queue : queue.put()
	deactivate triggerListener
	deactivate triggerListener
	deactivate queue
end
startLoop ->> queueHandler : init(mode, triggerQueue):Thread::thread
loop
	activate queueHandler
	activate queue
note right of queueHandler
Thread that handles
events in queue
end note
	queueHandler ->> queue : [queue > 0] queue.get()
	queue --> queueHandler : return
	deactivate queue
	activate alarm
	alt mode == "server"
		queueHandler -> db : insert('event_history', {device_id,type_id,attr_id,data,date})
		queueHandler -> alarm : check(device_id,attr_id,db_data)
		alarm -> alarm : <<trigger buzzer,camerashot,mail>>
	else mode == "client"
		activate gmail
		queueHandler --> gmail : triggerEvent(master_ip,master_port,data)
		gmail -->] : <<send mail>>
		deactivate gmail
	end	
	deactivate alarm
	deactivate queueHandler
end
|||
startLoop ->> sensorCheck : [sensors > 0] init(triggerQueue, sensors):Thread::thread
note left of sensorCheck
Thread that polls
data from sensors
end note
loop
	sensorCheck -> motion : [sensor == motion] get():dict
	activate motion
	motion --> sensorCheck : <<return status>>
	deactivate motion

	activate sensor
	sensorCheck -> sensor : [sensor == switch] get():dict
	sensor --> thief : <<check sensor>>
	thief --> sensor : return
	sensor --> sensorCheck : <<return status>>
	deactivate sensor
	
	activate power
	sensorCheck -> power : [sensor == power] get():dict
	power --> sensorCheck : <<return status>>
	deactivate power
end

@enduml
